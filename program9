Develop 1D CNN using TensorFlow to classify lung cancer dataset. Evaluate the model performance using metrics such as accuracy, precision, and recall on a test dataset.


# STEP 1: Import Libraries

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
import matplotlib.pyplot as plt
from google.colab import files


# STEP 2: Upload Dataset from User

print("Please upload the lung cancer dataset CSV file:")
uploaded = files.upload()
filename = list(uploaded.keys())[0]


# STEP 3: Load and Prepare the Data

df = pd.read_csv(filename)

# Drop irrelevant columns
df = df.drop(columns=['Patient Id'], errors='ignore')

# Drop missing values (if any)
df.dropna(inplace=True)

# Encode target label
label_encoder = LabelEncoder()
df['Level'] = label_encoder.fit_transform(df['Level'])  # Low/Medium/High â†’ 0/1/2

# Separate features and target
X = df.drop('Level', axis=1).select_dtypes(include=np.number).values
y = df['Level'].values

# Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Reshape for 1D CNN: (samples, features, 1)
X_train = X_train[..., np.newaxis]
X_test = X_test[..., np.newaxis]


# STEP 4: Build 1D CNN Model

model = tf.keras.Sequential([
    tf.keras.layers.Conv1D(32, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)),
    tf.keras.layers.MaxPooling1D(pool_size=2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # 3-class classification
])

# Compile model for multiclass classification
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)


# STEP 5: Train the Model

print("Training the model...")
history = model.fit(X_train, y_train, epochs=10, batch_size=8, verbose=1)


# STEP 6: Evaluate the Model

print("\nEvaluating the model on test set...")
y_pred_probs = model.predict(X_test)
y_pred = np.argmax(y_pred_probs, axis=1)  # Convert softmax output to class labels

# Performance Metrics
print("\nModel Performance:")
print(f"Accuracy : {accuracy_score(y_test, y_pred):.4f}")
print(f"Precision: {precision_score(y_test, y_pred, average='macro'):.4f}")
print(f"Recall   : {recall_score(y_test, y_pred, average='macro'):.4f}")


# STEP 7: Plot Confusion Matrix

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5, 4))
plt.imshow(cm, cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.colorbar()
plt.show()
